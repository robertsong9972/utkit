diff --git a/internal/model/calculator.go b/internal/model/calculator.go
index 05b3efc..fb3469d 100644
--- a/internal/model/calculator.go
+++ b/internal/model/calculator.go
@@ -4,13 +4,14 @@ import (
 	"bufio"
 	"errors"
 	"fmt"
-	"github.com/robertsong9972/utkit/internal/core"
 	"io"
+	"log"
 	"os"
+	"strconv"
 	"strings"
 
 	"github.com/robertsong9972/utkit/internal/config"
-	"github.com/robertsong9972/utkit/internal/util"
+	"github.com/robertsong9972/utkit/internal/core"
 )
 
 type calculator struct {
@@ -22,7 +23,7 @@ func NewCalculator() *calculator {
 
 func (c *calculator) PrintCovResult() {
 	c.printIncrementCovRate()
-	rate := c.getWeightedCovRate()
+	rate := c.totalWgCovRate()
 	printPackages()
 	printCoverageRate(rate)
 }
@@ -43,60 +44,44 @@ func (c *calculator) printIncrementCovRate() {
 	}
 }
 
-func (c *calculator) getWeightedCovRate() float64 {
+func (c *calculator) totalWgCovRate() float64 {
 	sum := 0.0
-	lineCount := 1e-11
-	for _, v := range config.PackageMap {
-		packLineCount := c.getPackageLines(v.PackagePath)
-		sum += v.CoverageRate * packLineCount
-		lineCount += packLineCount
-	}
-	return sum / lineCount
-}
-
-func (c *calculator) getPackageLines(path string) float64 {
-	lineCount := 1e-11
-	files, err := os.ReadDir(path)
-	util.AssertError(err)
-	return lineCount + c.traversePackage(files, path)
-}
-
-func (c *calculator) traversePackage(files []os.DirEntry, packagePath string) float64 {
-	count := 0.0
-	for _, file := range files {
-		if config.TestFileReg.MatchString(file.Name()) || file.IsDir() {
-			continue
-		}
-		goFile, err := os.Open(fmt.Sprintf("%s/%s", packagePath, file.Name()))
-		util.AssertError(err)
-		rd := bufio.NewReader(goFile)
-		count += c.traverseFile(rd)
+	totalStat := 1e-11
+	cvrPath := "./localfiles/cover.out"
+	file, err := os.Open(cvrPath)
+	if err != nil {
+		log.Fatalf("failed to load cover.out, are you sure ./localfiles/cover.out exit?")
 	}
-	return count
-}
-
-func (c *calculator) traverseFile(reader *bufio.Reader) float64 {
-	count := 0.0
-	start := false
-	for {
-		line, err := reader.ReadString('\n')
+	rd := bufio.NewReader(file)
+	var lineIdx int
+	for ; ; lineIdx++ {
+		line, err := rd.ReadString('\n')
 		if err != nil || io.EOF == err {
 			break
 		}
-		if !start {
-			start = config.FunctionReg.MatchString(line)
+		if lineIdx == 0 {
 			continue
 		}
-		line = strings.Trim(line, " ")
-		if line == "\n" || config.EmptyReg.MatchString(line) {
-			continue
+		statCnt, isCovered := c.cutCoverLine(line)
+		totalStat += float64(statCnt)
+		if isCovered {
+			sum += float64(statCnt)
 		}
-		count++
 	}
-	if start {
-		count++
+	return sum * 100 / totalStat
+}
+
+func (c *calculator) cutCoverLine(line string) (int64, bool) {
+	stat := strings.Split(line, " ")
+	statCnt, err := strconv.ParseInt(stat[1], 10, 64)
+	if err != nil {
+		log.Fatalf("error when parse line statement count,err=%v", err)
+	}
+	cvr, err := strconv.ParseInt(strings.Trim(stat[2], "\n"), 10, 64)
+	if err != nil {
+		log.Fatalf("error when parse line covered flag,err=%v", err)
 	}
-	return count
+	return statCnt, cvr > 0
 }
 
 func printPackages() {
@@ -105,6 +90,7 @@ func printPackages() {
 		fmt.Printf("package:%s/%s\n", config.ModuleName, k)
 	}
 }
+
 func printCoverageRate(rate float64) {
-	fmt.Printf("The weighted average coverage: %.1f%% of statements\n", rate)
+	fmt.Printf("The weighted average coverage: %.2f%% of statements\n", rate)
 }
diff --git a/internal/model/calculator_m.go b/internal/model/calculator_m.go
new file mode 100644
index 0000000..7a5bbdc
--- /dev/null
+++ b/internal/model/calculator_m.go
@@ -0,0 +1,5 @@
+package model
+
+func ccTest() {
+	println(123)
+}
